H5新增的表单内容
新增type类型
        Type=“email”   限制用户必须输入email类型
        Type=“url”        限制用户必须输入url类型
        Type=“range”   产生一个滑动条表单
        Type=“number”
        Type=“search”   产生一个搜索意义的表单
        Type=“color”     生成一个颜色选择的表单

        Type=“time”      限制用户必须输入时间类型
        Type=“month”        限制用户必须输入月类型
        Type=“week”        限制用户必须输入周类型
        Type=“datetime-local”        选取本地时间
        type=”date”
新增表单属性
        required     监测是否为空。
        min      最小
        max      最大
        step     步幅  确定一个法定值。 -3 0 3 6 9
        autocomplete    是否自动提示信息    属性值   on    off
        placeholder    文本框的提示信息
        autofocus      自动聚焦。一个页面只能由一个。
        pattern    后面的属性值是一个正则表达式。  
                        //手机号验证pattern="^1[3|5|8|7]\d{9}$"
        novalidate     取消验证
        multiple     选择（上传）多个文件

        list     必须结合datalist标签，绑定datalist  id名称。
H5增加的表单标签
        <datalist></datalist>
            给绑定id的list属性的元素，做提示信息的。

        <output></output>
            计算结果的输出，脚本的输出
css3:( 增加了一些属性！ )
        背景、字体、边框、文本......
    渐进增强：
        保证最基本的功能（用蜡烛照明  ->  用户体验不好但是保证最基本的功能）
        再画时间，给小山村通电......
        通电之后：装电灯：  功能也保证了  用户体验提升
    优雅降级：
        先针对于版本较高的设备进行项目构建，保证功能和用户体验最完美，
        项目完成之后，再向下做兼容（牺牲一些交互效果，保证最基本功能即可。。。）
属性选择器：
1: 选择符[属性名]                  只要带有当前属性名就会被选中。
    2: 选择符[属性名="属性值"]          不仅制定属性名，有指定属性值
    3: 选择符[属性名~="属性值"]         属性值为一个词列表，只要包含当前词就会被选中
    4: 选择符[属性名^="属性值"]         属性值必须是当前指定的属性值开头的
    5：选择符[属性名$="属性值"]         属性值必须是当前指定的属性值结尾的 
    6: 选择符[属性名*="属性值"]         属性值中只要包含了指定的字符就会被选中
    7: 选择符[属性名|="属性值"]         属性值仅是当前指定的属性值，或者是以属性值- 开头  （ left-con ）  (属性值只有一个属性值，或者属性值-开头的词列表)

结构性伪类选择器：
结构性伪类选择器：( 选择谁 选择符就行写谁 )
如果子集标签类型一致（类名一致）的情况下：采用的是  child
        1 : 选择符:first-child{  }
        2 : 选择符:last-child{  }
        3 : 选择符:nth-child(val){}
            val : 
                可以是某个数值 表示第几个
                2n 或者 even        偶数
                2n + 1  或者 odd    奇数
        4 : 选择符:nth-last-child(){}    倒数第几个
        5 : 选择符:only-child{}   当前子集只有一个元素的时候才会被选择
如果子集合标签类型不一致（类名不一致）的情况下：采用的是  of-type 
    of-type   先确定类型，把不同类型的先剔除。剩下同类的进行第几个选择。
        1 : 选择符:first-of-type{  }
        2 : 选择符:last-of-type{  }
        3 : 选择符:nth-of-type(val){}
            val : 
                可以是某个数值 表示第几个
                2n 或者 even        偶数
                2n + 1  或者 odd    奇数
        4 : 选择符:nth-last-of-type(){}    倒数第几个
        5 : 选择符:only-of-type{}   当前子集只有一个元素的时候才会被选择
 拓展：
        ：root    选择的是根元素  html
        选择符:empty  当当前元素 没有任何 内容 或者 没有任何子元素的时候会被选中
UI元素状态伪类：
    E:enabled
  		匹配所有用户界面（form表单）中处于可用状态的E元素
  	E:disabled
  		匹配所有用户界面（form表单）中处于不可用状态的E元素
  	E:checked
  		匹配所有用户界面（form表单）中处于选中( 单选、多选 )状态的元素E
  	E::selection
  		匹配E元素中被用户选中或处于高亮状态的部分
动态伪类：
E:link
  		链接伪类选择器  
  		选择匹配的E元素，而且匹配元素被定义了超链接并未被访问过。常用于链接描点上
  	E:visited  
  		链接伪类选择器
  		选择匹配的E元素，而且匹配元素被定义了超链接并已被访问过。常用于链接描点上
  	E:active
  		用户行为选择器
  		选择匹配的E元素，且匹配元素被激活。常用于链接描点和按钮上
  	E:hover
  		用户行为选择器
  		选择匹配的E元素，且用户鼠标停留在元素E上。IE6及以下浏览器仅支持a:hover
  	E:focus
  		用户行为选择器
  		选择匹配的E元素，而且匹配元素获取焦点
状态伪类：
    :checked
        form元素选中状态下执行的样式。
层级选择器：
        父元素>子元素{}   
            说明：只能选择父元素的最近的一层子元素。
        兄弟元素 + 兄弟元素{}
            说明：通过当前的元素 选择符 离她最近的 下面的兄弟元素      
        兄弟元素 ~ 兄弟元素{}
            说明：通过当前的元素 选择符 下面的所有的兄弟元素
文本阴影属性：text-shadow:
            属性值：
                属性值1 : 阴影横向的位置
                属性值2 : 阴影纵向的位置
                属性值3 : 阴影的大小
                属性值4 : 阴影的颜色
多阴影的设置：
            text-shadow:-2px -3px 8px red,10px 10px 8px red;
盒子阴影：box-shadow:
        h-shadow	必需的。水平阴影的位置。允许负值
        v-shadow	必需的。垂直阴影的位置。允许负值
        blur	可选。模糊距离
        spread	可选。阴影的大小
        color	可选。阴影的颜色。
        inset	可选。从外层的阴影（开始时）改变阴影内侧阴影
        box-shadow:10px 10px 10px 20px red;
文本换行：word-wrap:break-word
        首先尝试把长单词换到下一行显示，如果在一行仍然有超出，会在单词内部断句。
        word-break:break-all;
        不会把长单词换到下一行，直接在单词内部进行断句（粗暴断句）
图表库：每一个图标当作一个小字体，
        习惯把每一个图标放在i标签里面
        首先给i标签起class名字 iconfont
        然后再添加对应的应用的图标的名称。
背景图原点的改变(背景的起始点)：
        background-origin:
            padding-box	背景图像填充框的相对位置   默认值
            border-box	背景图像边界框的相对位置
            content-box	背景图像的相对位置的内容框     
背景的裁切：
        background-clip:
            padding-box	背景图像填充框的相对位置   
            border-box	背景图像边界框的相对位置    默认值
            content-box	背景图像的相对位置的内容框  
背景图的大小：
        background-size:宽度 高度
            属性值的设置：
                固定大小： 100px  200px
                百分比：   100%   100%
                cover     成比例放大，直到铺满整个容器。
                contain   成比例放大，当背景图的宽或者高达到最大则停止
多背景图的设置：
        background:url(./1.jpg) no-repeat left top,url(./2.jpg) no-repeat right bottom;
        如果想添加背景颜色 background-color:red;
颜色模式：
    red\green\blue\pink\orange。。。。。。
    十六进制表示颜色值：  #ff0000  #00ff00  
    rgb(255,0,0);
    rgba(250,0,0,.5);      //让背景色透明！内容不透明
    了解：
        HSL(357,81%,36%)
        HSLA(357,81%,36%,0.5)
图片边框：border-image 属性是一个简写属性，用于设置以下属性:
    border-image-source	用在边框的图片的路径。
    border-image-slice	图片边框向内偏移(不加单位)。
        不加单位！
        第一个值横向的两刀
        第二个值纵向的两刀
        fill属性值：保持中间 的 图片显示。
    border-image-repeat	图像边框是否应平铺(repeat)、铺满(round)或拉伸(stretch)
    border-image-outset	边框图像区域超出边框的量(值是一个倍数)
圆角：border-radius:20px
        一个属性值：
            按照属性值为半径 在矩形区域的四个角 画圆。
    border-radius:20px 40px;
        第一个属性值：左上角以及右下角
        第二个属性值：右上角以及左下角
    border-radius:20px 40px 80px;
        第一个值：左上角
        第二个值: 左下角 右上角
        第三个值：右下角
    border-radius:20px 50px 80px 100px;
        从左上角开始 顺时针设置。
椭圆：border-radius:20px/50px
        /前面的代表水平半径
        /后面的代表垂直半径
    border-radius: 10px 20px 30px 40px / 40px 20px 30px 10px;
新增宽高属性：法定属性值：
fill-available、fit-content、max-content、min-content
fill-available：
        作用：让元素自适应父元素宽或者是高。
        面试题： fill-available  和 width:100%的区别
            对padding的影响
    fit-content: 让一个块元素，适应内容的一个宽度
    max-content     让元素优先适应最大内容宽
    min-content     让元素优先适应最小内容宽
calc运算方式：两栏布局中，当左盒子占200px，右为了宽度自适应运用calc方式：widch:calc(100%-200px); 

css事件： 
pointer-events: none;    禁止一些事件触发。
pointer-events: none; 穿透遮罩，让当前元素遮住的元素有事件触发。