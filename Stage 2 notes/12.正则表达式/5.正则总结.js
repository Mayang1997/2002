// 正则是什么？正则是可以解析字符串的一套规则

// 正则怎么定义
// 字面量
// var reg = /表达式/;
// // 构造函数方式
// var reg = new RegExp();

// 正则表达式由什么组成
// 字符
/**
 * 元字符：带有特殊含义的字符
 * \d 代表任意一个数字
 * \w 代表任意一个数字、字母、下划线
 * \s 代表一个空格
 * . 代表任意一个字符
 * [] 表示中括号中的任意一个字符 - 中括号中的^表示非
 * () 表示整个小括号可以当做一个字符来看待
 * \ 用来转义特殊字符  (\\d)
 * 普通字符：1 a
 */

/**
 * 修饰符 - 主要用来修饰上面的字符
 * {4,12} 匹配他前面的字符，可以是4~12位都能匹配到
 * {4,}
 * {4}
 * * 任意多位
 * ? 最多1位
 * + 最少1位
 * ^ 修饰开头
 * $ 修饰结尾
 */

/**
 * 模式修正符 - 用来修饰整个正则表达式
 * i 代表忽略大小写
 * g 贪婪模式 - 正常情况下，匹配一次就停了，但是加了g之后，就匹配一次还不够，继续匹配下一次
 */

// var reg = /\{\$([^{}]+)\}/ig; 
// {$    (除了大括号的任意多个字符)  }

var str = "<tr>${id}</tr>";
var reg = /\{\$([^{}]+)\}/ig; 
var res = str.match(reg);
console.log(res);